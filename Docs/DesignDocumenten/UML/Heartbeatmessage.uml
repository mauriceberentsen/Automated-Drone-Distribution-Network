@startuml
autonumber
participant "Node 1:MeshComponent" as 1
participant "heartbeat:HeartbeatMessage" as 1m
participant "WM:WirelessMessage" as 1wm
participant "NodeTable:ChildTableTree" as 1NT
participant "publishService:WirelessSignalSimulator" as SS
note over SS: Service that simulates wireless communication
participant "Node 2:MeshComponent" as 2


[-> 1  : SendHeartbeat(other = 2) : bool
activate 1
1 -> 1NT ++: towards = NodeTable.getDirectionToNode(other) : uint8_t
1NT -> 1NT : it = family.find(other) \n : iterator <<uint8_t, set<uin8_t> >>
note over 1NT: Look if the other node is a child else look if it's a grandchild. If nothing is found return 255
alt \t      it != family.end()
	1 <- 1NT : it->first
else
	loop \t child : family
    alt \t child.second.find(node) != child.second.end() 
    1 <- 1NT : child.first
    end
    end
	1 <- 1NT-- : 255
end
create 1m
1 -> 1m : <<create>>\n HeartbeatMessage(nodeID,\n connectedToGateway,\n prefferedGateway)
create 1wm
1 -> 1wm : <<Create>>
1 -> 1wm : WM.request.message.from = NodeID
1 -> 1wm : WM.request.message.to = towards
1 -> 1wm : WM.request.message.forward = other
1 -> 1m  : heartbeat.toPayload(WM.request.message.payload)
return sendMessage(towards, WM)


alt SignalSimulator available
1 -> SS ++ : send_message(WM) : bool
SS -> SS : from = Network.find(WM.request.message.from) : iterator <<uint8_t, Node>>
SS -> SS : to = Network.find(WM.request.message.to) : iterator <<uint8_t, Node>>

alt from != Network.end( ) && to != Network.end( )
	alt !from->second->on  || !to->second->on 
		SS <- SS :	response.succes = false
    else
    	SS -> SS : distance  = \n from->second->getPosition( ).Distance( to->second->getPosition( ) )
        alt distance < maximum communication distance
        	SS -> SS ++ : to->second->recieveMessage( req.message );
            SS --> 2 --:  OnRosMsg (req.message)
        	SS <- SS :	response.succes = true
		else
        	SS <- SS :	response.succes = false
		end
    end
  else
  SS <- SS :	response.succes = false    

end

1 <- SS --: <<Response>>

alt  response.succes == false
1 -> 1 :  informAboutMissingchild (NodeID, other)
[<- 1 : False
else
[<- 1 : True

end

else SignalSimulator not available
1 -> 1 : ROS_ERROR( "SIGNAL SIMULATOR NOT AVAILABLE" )
[<- 1 : False

end
deactivate 1
@enduml