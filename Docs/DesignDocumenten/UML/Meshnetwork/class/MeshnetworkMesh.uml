@startuml

namespace Messages{
    class LocationMessage
}

namespace RoutingTechnique{
    interface IRoutingTechnique
    class ChildTableTree
    ChildTableTree -|> IRoutingTechnique 
}

namespace ros{ 
    class CallbackQueue
    class NodeHandle
}

namespace gazebo{
namespace meshnetwork{
class MeshnetworkCommunicator
{
    -mtx:mutex
    -timerstarted:bool
    -negotiationList : multimap<float,uint8_t>
    -lastTimeOnline : Time
    -timeUntilConnectionLost = 30 : const float
    ----
    +MeshnetworkCommunicator()
    -sendHeartbeatToGateway()
    -StartEmergencyProtocol()
    -startMovementNegotiation()
    -SafeAddToNegotiationList (const std::pair< float, uint8_t >&)
    -informOthersAboutCost(float)
}

class MeshnetworkComponent
{
    #initTime: const float
    #CheckConnectionTime: const float
    #nodeID: uint8_t
    #prefferedGateway: uint8_t
    #hopsFromGatewayAway: uint8_t
    #debug = false : bool
    #on = true: bool
    #knowPrefferedGatewayLocation = false: bool
    #connectedToGateway = false: bool
    #droneID: uint16_t
    #totalMessageSent: uint32_t 
    #model: ModelPtr
    ----
    +sendHeartbeat (uint8_t other) : bool
    +searchOtherNodesInRange()
    +IntroduceNode(uint8_t)
    #MeshnetworkComponent()
    #Load(ModelPtr,ElementPtr)
    #sendGoalToEngine(const LocationMessage&)
    #sendGoalToEngine(const uint8_t, const float, const float, const uint16_t)
    #informAboutMissingChild(uint8_t,uint8_t)
    #requestLocation(const uint8_t)
    #sendLocation(const uint8_t)
    #distanceBetweenMeAndLocation (const LocationMessage&): float
    #sendMessage(WirelessMessage&) : bool
    #processRequestLocation(const NRF24ConstPtr&)
    ....
    #{abstract}Init()
    #{abstract}CheckConnection()
    #{abstract}lostConnection()
    #{abstract}processIntroduction(const NRF24ConstPtr&)
    #{abstract}processHeartbeat(const NRF24ConstPtr&)
    #{abstract}processMovementNegotiationMessage(const NRF24ConstPtr&)
    .....
    -OnRosMsg (const NRF24ConstPtr&)
    -forwardMessage(const NRF24ConstPtr&)
    -processMessage(const NRF24ConstPtr&)
    -processLocation(const NRF24ConstPtr&)
    -processMissing(const NRF24ConstPtr&)
    -processSendGoalToEngine(const NRF24ConstPtr&)
    -QueueThread()
    -switchPower(TriggerRequest,TriggerResponse)
    -publishDebugInfo()

}
class MeshnetworkGateway
{
    -gatewaySub: Subscriber
    -gatewayQueue(const RequestGatewayDroneFlightConstPtr&)
}
}
    
}
gazebo.meshnetwork.MeshnetworkComponent --( RoutingTechnique.IRoutingTechnique

gazebo.meshnetwork.MeshnetworkComponent ---> "-rosNode" ros.NodeHandle  
gazebo.meshnetwork.MeshnetworkComponent ---> "-rosQueue" ros.CallbackQueue  
    


@enduml