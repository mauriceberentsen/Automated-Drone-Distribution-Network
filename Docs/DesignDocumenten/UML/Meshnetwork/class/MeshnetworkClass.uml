@startuml

namespace Messages{
    enum Messagetype{
        NOTDEFINED 	
        LOCATION 	
        REQUESTLOCATION 	
        PRESENT 	
        HEARTBEAT 	
        MISSING 	
        MOVE_TO_LOCATION 	
        MOVEMENT_NEGOTIATION
    }
    class Message{
        #ID: uint8_t
        #type: uint8_t
        ----
        +Message (const uint8_t, Messagetype)
        +Message (const uint8_t*)
        +getID() const: const uint8_t
        +{abstract} toPayload(uint8_t*) const
        +{abstract} toString() const : const string

    }
    class LocationMessage{
        -latitude
        -longitude
        -height
        -timeSincePosix
        ----
        +LocationMessage(uint8_t, float, float, int16_t, uint32_t )
        +LocationMessage(uint8_t*)
        +~LocationMessage()
        +getLatitude():const float
        +getlongitude():const float
        +getHeight():int16_t
        +getTimeSincePosix():uint32_t
    }
    LocationMessage -|> Message
    Message-Messagetype
}

namespace RoutingTechnique{
    interface IRoutingTechnique
    class ChildTableTree
    ChildTableTree -|> IRoutingTechnique 
}

namespace ros{ 
    class CallbackQueue
    class NodeHandle
    class Subscriber
    class Publisher
}

namespace gazebo{
    namespace meshnetwork{
        class MeshnetworkCommunicator
        {
            -mtx:mutex
            -timerstarted:bool
            -negotiationList : multimap<float,uint8_t>
            -lastTimeOnline : Time
            -timeUntilConnectionLost = 30 : const float
            ----
            +MeshnetworkCommunicator()
            -sendHeartbeatToGateway()
            -StartEmergencyProtocol()
            -startMovementNegotiation()
            -SafeAddToNegotiationList (const std::pair< float, uint8_t >&)
            -informOthersAboutCost(float)
        }

        class MeshnetworkComponent
        {
            #initTime: const float
            #CheckConnectionTime: const float
            #nodeID: uint8_t
            #prefferedGateway: uint8_t
            #hopsFromGatewayAway: uint8_t
            #debug = false : bool
            #on = true: bool
            #knowPrefferedGatewayLocation = false: bool
            #connectedToGateway = false: bool
            #droneID: uint16_t
            #totalMessageSent: uint32_t 
            #model: ModelPtr
            ----
            +sendHeartbeat (uint8_t other) : bool
            +searchOtherNodesInRange()
            +IntroduceNode(uint8_t)
            #MeshnetworkComponent()
            #Load(ModelPtr,ElementPtr)
            #sendGoalToEngine(const LocationMessage&)
            #sendGoalToEngine(const uint8_t, const float, const float, const uint16_t)
            #informAboutMissingChild(uint8_t,uint8_t)
            #requestLocation(const uint8_t)
            #sendLocation(const uint8_t)
            #distanceBetweenMeAndLocation (const LocationMessage&): float
            #sendMessage(WirelessMessage&) : bool
            #processRequestLocation(const NRF24ConstPtr&)
            ....
            #{abstract}Init()
            #{abstract}CheckConnection()
            #{abstract}lostConnection()
            #{abstract}processIntroduction(const NRF24ConstPtr&)
            #{abstract}processHeartbeat(const NRF24ConstPtr&)
            #{abstract}processMovementNegotiationMessage(const NRF24ConstPtr&)
            .....
            -OnRosMsg (const NRF24ConstPtr&)
            -forwardMessage(const NRF24ConstPtr&)
            -processMessage(const NRF24ConstPtr&)
            -processLocation(const NRF24ConstPtr&)
            -processMissing(const NRF24ConstPtr&)
            -processSendGoalToEngine(const NRF24ConstPtr&)
            -QueueThread()
            -switchPower(TriggerRequest,TriggerResponse)
            -publishDebugInfo()

        }
        class MeshnetworkGateway
        {
            -gatewayQueue(const RequestGatewayDroneFlightConstPtr&)
        }
        MeshnetworkGateway --|> MeshnetworkComponent
        MeshnetworkCommunicator --|> MeshnetworkComponent
    }
    
}
gazebo.meshnetwork.MeshnetworkComponent --( RoutingTechnique.IRoutingTechnique

gazebo.meshnetwork.MeshnetworkComponent -up-> "-rosQueue" ros.CallbackQueue  
gazebo.meshnetwork.MeshnetworkComponent -up-> "-rosNode" ros.NodeHandle  
gazebo.meshnetwork.MeshnetworkComponent --> "-rosPub\n-nodeDebugTopic\n-droneEnginePublisher" ros.Publisher  
gazebo.meshnetwork.MeshnetworkComponent -up-> "-lastGoodKnownLocation \n -prefferedGateWayLocation" Messages.LocationMessage
gazebo.meshnetwork.MeshnetworkComponent .. Messages.Messagetype: <<uses>> 
gazebo.meshnetwork.MeshnetworkComponent --( IDroneEngine 

gazebo.meshnetwork.MeshnetworkGateway --> "-gatewaySub" ros.Subscriber    


@enduml