@startuml
autonumber
participant "communication:VirtualNRF24" as 1
participant "WM:WirelessMessage" as WM
participant "publishService:WirelessSignalSimulator" as SS
note over SS: Service that simulates wireless communication
participant "to:Node" as node
participant "Node 2:VirtualNRF24" as 2
participant "meshnetworkComponent:IMeshNetwork" as IMN


[-> 1  : SendMessageTo(msg) : bool
create WM
1 -> WM : <<create>>
1 -> WM : request.from = msg[FROM]
1 -> WM : request.to = msg[TO]
loop int i = 0; i < MAX_PAYLOAD; i++
1 -> WM : WM.request.message.payload[i] = msg[i];
end


alt SignalSimulator available
1 -> SS ++ : send_message(WM) : bool
SS -> SS : from = Network.find(WM.request.from) : iterator <<uint8_t, Node>>
SS -> SS : to = Network.find(WM.request.to) : iterator <<uint8_t, Node>>

alt from != Network.end( ) && to != Network.end( )
	alt !from->second->on  || !to->second->on 
		SS <- SS :	response.succes = false
    else
    	SS -> SS : distance  = \n from->second->getPosition( ).Distance( to->second->getPosition( ) )
        alt distance < maximum communication distance
        	SS -> SS ++ : to->second->recieveMessage( req.message );
            SS -> node --:  RecieveMessage(req.message)
						activate node
						node --> 2 +: publish(msg)
						deactivate node
						2 -> IMN : onMsg(msg)
						deactivate 2
        	SS <- SS :	response.succes = true
		else
        	SS <- SS :	response.succes = false
		end
    end
  else
  SS <- SS :	response.succes = false    

end

1 <- SS --: <<Response>>

alt  response.succes == false
[<- 1 : False
else
[<- 1 : True

end

else SignalSimulator not available
1 -> 1 : ROS_ERROR( "SIGNAL SIMULATOR NOT AVAILABLE" )
[<- 1 : False

end
deactivate 1
@enduml